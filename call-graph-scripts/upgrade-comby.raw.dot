
digraph gocallvis {
    label="github.com/syncthing/syncthing/cmd/syncthing";
    labeljust="l";
    fontname="Arial";
    fontsize="14";
    rankdir="LR";
    bgcolor="lightgray";
    style="solid";
    penwidth="0.5";
    pad="0.0";
    nodesep="0.35";


"CompareVersions" -> "len"
"CompareVersions" -> "versionParts"
"FetchLatestReleases" -> "Decode"
"FetchLatestReleases" -> "insecureGet"
"FetchLatestReleases" -> "io.LimitReader"
"FetchLatestReleases" -> "json.NewDecoder"
"FetchLatestReleases" -> "l.Infoln"
"FetchLatestReleases" -> "resp.Body.Close"
"LatestRelease" -> "FetchLatestReleases"
"LatestRelease" -> "SelectLatestRelease"
"SelectLatestRelease" -> "CompareVersions"
"SelectLatestRelease" -> "SortByRelease"
"SelectLatestRelease" -> "l.Debugln"
"SelectLatestRelease" -> "len"
"SelectLatestRelease" -> "path.Base"
"SelectLatestRelease" -> "releaseNames"
"SelectLatestRelease" -> "sort.Reverse"
"SelectLatestRelease" -> "sort.Sort"
"SelectLatestRelease" -> "strings.HasPrefix"
"To" -> "os.Executable"
"To" -> "upgradeTo"
"ToURL" -> "os.Executable"
"ToURL" -> "path.Base"
"ToURL" -> "upgradeToURL"
"archiveFileVisitor" -> "io.LimitReader"
"archiveFileVisitor" -> "ioutil.ReadAll"
"archiveFileVisitor" -> "l.Debugf"
"archiveFileVisitor" -> "len"
"archiveFileVisitor" -> "path.Base"
"archiveFileVisitor" -> "path.Dir"
"archiveFileVisitor" -> "strings.Split"
"archiveFileVisitor" -> "writeBinary"
"insecureGet" -> "fmt.Sprintf"
"insecureGet" -> "http.NewRequest"
"insecureGet" -> "insecureHTTP.Do"
"insecureGet" -> "req.Header.Set"
"insecureGet" -> "runtime.Version"
"readRelease" -> "http.NewRequest"
"readRelease" -> "insecureHTTP.Do"
"readRelease" -> "io.LimitReader"
"readRelease" -> "l.Debugf"
"readRelease" -> "path.Ext"
"readRelease" -> "readTarGz"
"readRelease" -> "readZip"
"readRelease" -> "req.Header.Add"
"readRelease" -> "resp.Body.Close"
"readTarGz" -> "archiveFileVisitor"
"readTarGz" -> "gzip.NewReader"
"readTarGz" -> "tar.NewReader"
"readTarGz" -> "tr.Next"
"readTarGz" -> "verifyUpgrade"
"readZip" -> "archiveFileVisitor"
"readZip" -> "bytes.NewReader"
"readZip" -> "file.Open"
"readZip" -> "inFile.Close"
"readZip" -> "int64"
"readZip" -> "ioutil.ReadAll"
"readZip" -> "len"
"readZip" -> "verifyUpgrade"
"readZip" -> "zip.NewReader"
"releaseNames" -> "fmt.Sprintf"
"upgradeTo" -> "l.Debugln"
"upgradeTo" -> "path.Base"
"upgradeTo" -> "releaseNames"
"upgradeTo" -> "strings.HasPrefix"
"upgradeTo" -> "upgradeToURL"
"upgradeToURL" -> "filepath.Dir"
"upgradeToURL" -> "os.Remove"
"upgradeToURL" -> "os.Rename"
"upgradeToURL" -> "readRelease"
"verifyUpgrade" -> "bytes.NewBufferString"
"verifyUpgrade" -> "errors.New"
"verifyUpgrade" -> "fd.Close"
"verifyUpgrade" -> "io.MultiReader"
"verifyUpgrade" -> "l.Debugf"
"verifyUpgrade" -> "os.Open"
"verifyUpgrade" -> "os.Remove"
"verifyUpgrade" -> "signature.Verify"
"versionParts" -> "len"
"versionParts" -> "make"
"versionParts" -> "strconv.Atoi"
"versionParts" -> "strings.HasPrefix"
"versionParts" -> "strings.Split"
"versionParts" -> "strings.SplitN"
"writeBinary" -> "io.Copy"
"writeBinary" -> "ioutil.TempFile"
"writeBinary" -> "os.Chmod"
"writeBinary" -> "os.FileMode"
"writeBinary" -> "os.Remove"
"writeBinary" -> "outFile.Close"
"writeBinary" -> "outFile.Name"
}

// -- inputs --
.decl succ(l1:number, l2:number)
.decl write(w:symbol, l:number)
.decl read(w:symbol, l:number)

// -- liveness analysis --
.decl live(x:symbol, l:number)
live(w, l) :- read(w, l).
live(w, l) :- live(w, k), succ(k, l), !write(w, l).

.output live

// Example: Query which variables are live on line 2
// .decl liveAtLine(v:symbol)
// liveAtLine(V) :- live(V, 2).
// .output liveAtLineTwo

// Example: Query lines where variable b is live.
.decl bIsLive(l:number)
bIsLive(L) :- live("b", L).
.output bIsLive


// -- facts ---
// plus.toml
// a = b + c
read("b", 1).
read("c", 1).
write("a", 1).
succ(1, 1 + 1).

// plus.toml
// c = b + c
read("b", 3).
read("c", 3).
write("c", 3).
succ(3, 3 + 1).

// minus.toml
// b = a - d
read("a", 2).
read("d", 2).
write("b", 2).
succ(2, 2 + 1).

// halt.toml

